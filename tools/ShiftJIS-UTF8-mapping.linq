<Query Kind="Program" />

void Main()
{
	var destination = @".\shift-jis-utf8-bytes.txt";

	Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
	var values = new List<(string, string)>();

	values.AddRange(GetShiftJisByteAndUtf8Byte(0x00, 0xEAA4));

	File.WriteAllLines(destination,
		values.OrderBy(bc => bc.Item1).Select(bc => $"{bc.Item1}|{bc.Item2}"));
}

// You can define other methods, fields, classes and namespaces here
List<(string, string)> GetShiftJisByteAndUtf8Byte(int start, int end)
{
	var byteToBytes = new List<(string, string)>();
	var shiftJisEncoder = Encoding.GetEncoding("Shift-JIS");

	int bytes = start - 1;
	while (bytes < end)
	{
		bytes = bytes + 1;

		if (exclusiveRegions.Any(r => r.Item1 <= bytes && bytes <= r.Item2))
			continue;

		var shiftJisBytes = BitConverter.GetBytes(bytes).Reverse().SkipWhile(bc => bc == 0).ToArray();
		var str = shiftJisEncoder.GetString(shiftJisBytes);

		if (string.IsNullOrEmpty(str))
			continue;

		var utf8Bytes = new UTF8Encoding(false, true).GetBytes(str);

		if (shiftJisBytes.SequenceEqual(utf8Bytes))
			continue;

		byteToBytes.Add((
			string.Join(string.Empty, shiftJisBytes.Select(x => BitConverter.ToString(new[] { x }))),
			string.Join(string.Empty, utf8Bytes.Select(utf => BitConverter.ToString(new[] { utf })))
		));
	}

	return byteToBytes;
}

private static (int, int)[] exclusiveRegions = new[]
{
	(0xE1, 0x814F),
	(0x7F, 0xA0),
	(0xE0, 0x8140),
	(0x817F, 0x817F),
	(0x81AD, 0x81B7),
	(0x81C0, 0x81C7),
	(0x81CF, 0x81D9),
	(0x81E9, 0x81EF),
	(0x81F8, 0x81FB),
	(0x81FD, 0x824E),
	(0x8259, 0x825F),
	(0x827A, 0x8280),
	(0x829B, 0x829E),
	(0x82F2, 0x833F),
	(0x837F, 0x837F),
	(0x8397, 0x839E),
	(0x83B7, 0x83BE),
	(0x83D7, 0x843F),
	(0x8461, 0x846F),
	(0x847F, 0x847F),
	(0x8492, 0x849E),
	(0x84BF, 0x889E),
	(0x88FD, 0x893F),
	(0x897F, 0x897F),
	(0x89FD, 0x8A3F),
	(0x8A7F, 0x8A7F),
	(0x8AFD, 0x8B3F),
	(0x8B7F, 0x8B7F),
	(0x8BFD, 0x8C3F),
	(0x8C7F, 0x8C7F),
	(0x8CFD, 0x8D3F),
	(0x8D7F, 0x8D7F),
	(0x8DFD, 0x8E3F),
	(0x8E7F, 0x8E7F),
	(0x8EFD, 0x8F3F),
	(0x8F7F, 0x8F7F),
	(0x8FFD, 0x903F),
	(0x907F, 0x907F),
	(0x90FD, 0x913F),
	(0x917F, 0x917F),
	(0x91FD, 0x923F),
	(0x927F, 0x927F),
	(0x92FD, 0x933F),
	(0x937F, 0x937F),
	(0x93FD, 0x943F),
	(0x947F, 0x947F),
	(0x94FD, 0x953F),
	(0x957F, 0x957F),
	(0x95FD, 0x963F),
	(0x967F, 0x967F),
	(0x96FD, 0x973F),
	(0x977F, 0x977F),
	(0x97FD, 0x983F),
	(0x9873, 0x989E),
	(0x98FD, 0x993F),
	(0x997F, 0x997F),
	(0x99FD, 0x9A3F),
	(0x9A7F, 0x9A7F),
	(0x9AFD, 0x9B3F),
	(0x9B7F, 0x9B7F),
	(0x9BFD, 0x9C3F),
	(0x9C7F, 0x9C7F),
	(0x9CFD, 0x9D3F),
	(0x9D7F, 0x9D7F),
	(0x9DFD, 0x9E3F),
	(0x9E7F, 0x9E7F),
	(0x9EFD, 0x9F3F),
	(0x9F7F, 0x9F7F),
	(0x9FFD, 0xE03F),
	(0xE07F, 0xE07F),
	(0xE0FD, 0xE13F),
	(0xE17F, 0xE17F),
	(0xE1FD, 0xE23F),
	(0xE27F, 0xE27F),
	(0xE2FD, 0xE33F),
	(0xE37F, 0xE37F),
	(0xE3FD, 0xE43F),
	(0xE47F, 0xE47F),
	(0xE4FD, 0xE53F),
	(0xE57F, 0xE57F),
	(0xE5FD, 0xE63F),
	(0xE67F, 0xE67F),
	(0xE6FD, 0xE73F),
	(0xE77F, 0xE77F),
	(0xE7FD, 0xE83F),
	(0xE87F, 0xE87F),
	(0xE8FD, 0xE93F),
	(0xE97F, 0xE97F),
	(0xE9FD, 0xEA3F),
	(0xEA7F, 0xEA7F),
};